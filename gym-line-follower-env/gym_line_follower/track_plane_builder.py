from .track import Track
import os

obj_string = r"""# Autogenerated .obj file for pybullet simualtion.
mtllib {mtl_file}
o Plane
v {x:.6f} -{y:.6f} 0.000000
v {x:.6f} {y:.6f} 0.000000
v -{x:.6f} {y:.6f} 0.000000
v -{x:.6f}  -{y:.6f} 0.000000

vt 1.000000 0.000000
vt 1.000000 1.000000
vt 0.000000 1.000000
vt 0.000000 0.000000

usemtl Material
s off
f 1/1 2/2 3/3
f 1/1 3/3 4/4
"""

mtl_string = r"""# Autogenerated .mtl file for pybullet simualtion.
newmtl Material
Ns 10.0000
Ni 1.5000
d 1.0000
Tr 0.0000
Tf 1.0000 1.0000 1.0000 
illum 2
Ka 0.0000 0.0000 0.0000
Kd 0.5880 0.5880 0.5880
Ks 0.0000 0.0000 0.0000
Ke 0.0000 0.0000 0.0000
map_Ka {texture_file}
map_Kd {texture_file}
"""


def build_track_plane(track: Track, width=3., height=2., ppm=1000, path=None):
    """
    Render track texture and build .obj and .mtl files describing track plane. Use .obj file inside .urdf to
    import track plane in pybullet.
    Height and width must be greater than track dimensions otherwise parts of track might not be rendered.
    :param track: array of track points shape (, 2)
    :param width: width of plane
    :param height: height of plane
    :param ppm: render resolution in pixel per meter
    :param path: save path, if None local path is used
    :return: None
    """
    obj_file = "track_plane.generated.obj"
    mtl_file = "track_plane.generated.mtl"
    texture_file = "track_texture.generated.png"

    if path is not None:
        obj_save_path = os.path.join(path, obj_file)
        mtl_save_path = os.path.join(path, mtl_file)
        texture_file_save_path = os.path.join(path, texture_file)
    else:
        obj_save_path = obj_file
        mtl_save_path = mtl_file
        texture_file_save_path = texture_file

    track.render(width, height, ppm=ppm, save=texture_file_save_path)
    x = width / 2
    y = height / 2
    obj = obj_string.format(x=x, y=y, mtl_file=mtl_file)
    mtl = mtl_string.format(texture_file=texture_file)
    with open(obj_save_path, "w") as f:
        f.write(obj)
    with open(mtl_save_path, "w") as f:
        f.write(mtl)
